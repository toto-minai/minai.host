#!/usr/local/bin/python3
from anki_en_modules import id_facts, gen_term
import genanki
import sys, os, datetime

en_model = genanki.Model(
    id_facts.en_model_id,
    'English Model',
    fields=[
        {'name': 'Word'},
        {'name': 'Prononciation'},
        {'name': 'PartsOfSpeech'},
        {'name': 'Information'}
    ],
    templates=[
        {
            'name': 'Basic',
            'qfmt': '<b>{{Word}}</b> {{PartsOfSpeech}}',
            'afmt': '<b>{{Word}}</b> /{{Prononciation}}/ {{PartsOfSpeech}} <hr /> <p>{{Information}}</p>'
        }
    ]
)

en_deck = genanki.Deck(
    id_facts.en_deck_id,
    'English'
)

file_name = 'list'
output_file_name = 'en_deck'
manual_tag = False
tex_tag = False

will_escape = False
for i in range(1, len(sys.argv)):
    if will_escape:
        will_escape = False
        continue

    if sys.argv[i][0] == '-':
        if sys.argv[i][1:] == 'm':
            manual_tag = True
        elif sys.argv[i][1:] == 'o':
            parts = sys.argv[i+1].split('.')
            if parts[len(parts)-1] == 'apkg':
                output_file_name = sys.argv[i+1][:-5]
            else:
                output_file_name = sys.argv[i+1]
            will_escape = True
        elif sys.argv[i][1:] == 'x':
            tex_tag = True
    else:
        file_name = sys.argv[i]

with open(file_name, 'r') as fin:
    text = ''
    lines = fin.readlines()
    lines_count = len(lines)
    count = 0
    for line in lines:
        if not manual_tag:
            sys.stdout.write('\r|{}{}| {}/{}'.format('█'*int(18 * count/lines_count), '-'*(18 - int(18 * count/lines_count)), count, lines_count))
            sys.stdout.flush()

        raw = line.strip()
        for term in gen_term.get_terms(raw, manual_tag):
            en_eg_note_fields = term

            text += '<p><b>{}</b> /{}/ {}</p><p>{}</p><p>SPLIT-HERE</p>'.format(term[0], term[1], term[2], term[3])

            en_eg_note = genanki.Note(
                model=en_model,
                fields=en_eg_note_fields
            )
            en_deck.add_note(en_eg_note)

        count += 1

    if not manual_tag:
        sys.stdout.write('\r|{}| {}/{}'.format('█'*18, lines_count, lines_count))

    if tex_tag:
        with open('output.html', 'w+') as fout:
            fout.write(text)

        os.system('pandoc output.html -o output.tex')

        with open('output.tex', 'r') as fin:
            text = fin.read().replace('SPLIT-HERE', '\\hr')
            with open('output.tex', 'w+') as fout:
                fout.write(text)

            # Needed changes here:
            header = open('/usr/local/bin/anki_en_modules/header.tex', 'r').read()
            main = open('output.tex', 'r').read().replace('\\\\', '\n')

            with open('{}-{}.tex'.format(output_file_name, datetime.datetime.now().strftime("%y-%d-%m")), 'w+') as fout:
                fout.write(header+main+'\n\\end{multicols*}\n\\end{document}')

        os.system('rm output.*')

    print('')

genanki.Package(en_deck).write_to_file('{}.apkg'.format(output_file_name))
